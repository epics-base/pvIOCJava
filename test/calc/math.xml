<?xml version="1.0" ?>
<IOCDatabase>
<substitute fromTo = "checkRecord=absInt,checkType=Int,checkValue=4" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcIntArg">
            <value>-4</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.abs(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=absLong,checkType=Long,checkValue=4" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcLongArg">
            <value>-4</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.abs(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=absFloat,checkType=Float,checkValue=4" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>-4.0F</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.abs(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=absDouble,checkType=Double,checkValue=3.9999999" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>-4.0D</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.abs(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=acos,checkType=Double,checkValue=180" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>-1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.acos(a))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=asin,checkType=Double,checkValue=90" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.asin(a))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=atan,checkType=Double,checkValue=45" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.atan(a))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=atan2,checkType=Double,checkValue=45" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.atan2(a,b))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />


<substitute fromTo = "checkRecord=cbrt,checkType=Double,checkValue=3" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>27.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.cbrt(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=ceil,checkType=Double,checkValue=28" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>27.5</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.ceil(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=cos,checkType=Double,checkValue=-1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.cos(Math.PI*a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=cosh,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>0.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.cosh(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=exp,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.log(Math.exp(a))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=expm1,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.log(Math.expm1(a)+1)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=floor,checkType=Double,checkValue=27" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>27.5</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.floor(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=hypot,checkType=Double,checkValue=5" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>3.0</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>4.0</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.hypot(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />


<substitute fromTo = "checkRecord=IEEEremainder,checkType=Double,checkValue=0.065" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>4.265</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>2.1</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.IEEEremainder(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />


<substitute fromTo = "checkRecord=log,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.log(Math.E*a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=log10,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>10.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.log10(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=log1p,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.log1p(Math.E*a-1)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=maxInt,checkType=Int,checkValue=2" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcIntArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcIntArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.max(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=maxLong,checkType=Long,checkValue=2" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcLongArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcLongArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.max(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=maxFloat,checkType=Float,checkValue=2" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcFloatArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.max(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=maxDouble,checkType=Double,checkValue=2" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.max(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=minInt,checkType=Int,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcIntArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcIntArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.min(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=minLong,checkType=Long,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcLongArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcLongArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.min(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=minFloat,checkType=Float,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcFloatArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.min(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=minDouble,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>1</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>2</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.min(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=pow,checkType=Double,checkValue=27" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.pow(a,b)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<record name = "powBig" type = "calcDouble">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.pow(a,Math.pow(a,b))
        </expression>
    </calculator>
</record>

<record name = "powBigInfinite" type = "calcDouble">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>a</name>
        </element>
        <element structureName = "calcDoubleArg">
            <value>3</value>
            <name>b</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.pow(a,Math.pow(a,Math.pow(a,b)))
        </expression>
    </calculator>
</record>

<record name = "random" type = "calcDouble">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.random()
        </expression>
    </calculator>
</record>

<substitute fromTo = "checkRecord=rint,checkType=Double,checkValue=11" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>10.67895</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.rint(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=roundInt,checkType=Int,checkValue=4" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.round(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=roundLong,checkType=Long,checkValue=-4" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>-4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.round(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkInteger.xml" />

<substitute fromTo = "checkRecord=signumFloat,checkType=Float,checkValue=-1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>-4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.signum(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=signumDouble,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.signum(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=sin,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>0.5</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.sin(Math.PI*a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=sinh,checkType=Double,checkValue=0" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.sinh(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=sqrt,checkType=Double,checkValue=5" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>25.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.sqrt(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=tan,checkType=Double,checkValue=1" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>0.25</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.tan(Math.PI*a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=tanh,checkType=Double,checkValue=0" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.tanh(a)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=toDegrees,checkType=Double,checkValue=180" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.PI)
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<substitute fromTo = "checkRecord=toRadians,checkType=Double,checkValue=180" />
<record name = "${checkRecord}" type = "calc${checkType}">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>180.0</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.toDegrees(Math.toRadians(a))
        </expression>
    </calculator>
<include href = "checkLink.xml" />
</record>
<include href = "checkReal.xml" />

<record name = "ulpFloat" type = "calcFloat">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcFloatArg">
            <value>-4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.ulp(a)
        </expression>
    </calculator>
</record>

<record name = "ulpDouble" type = "calcDouble">
    <alarm structureName = "alarm" />
    <timeStamp structureName = "timeStamp" />
    <scan>
        <processAfterStart>true</processAfterStart>
    </scan>
    <calcArgArray>
        <element structureName = "calcDoubleArg">
            <value>-4.3456</value>
            <name>a</name>
        </element>
    </calcArgArray>
    <calculator structureName = "expressionCalculator" >
        <expression>
            Math.ulp(a)
        </expression>
    </calculator>
</record>

<!--
-->

</IOCDatabase>
